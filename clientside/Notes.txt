Package.json contains project dependencies and scripts. Dependencies are essential which are at the start of application and devDependencies are the one's which we selected in commandLineInterface.
Configuration files: next.config.js is for nextjs and tsconfig.json is for typescript , .eslintrc.json is for eslintrc and finally postcss.config.js, taliwind.config.ts is for taliwind css.

Folders :
.next folder is created when we run dev or build scripts
node_modules this is were all the dependencies for our project were installed
public folder is for static assets
src folder contains app named folder where majority of our work will be done.
layout.tsx is ui which is shared across different pages in the application and finally page.tsx is the unique ui which we will see when we hit localhost:3000

Every page that corresponds to route in the browser should named page.tsx

For dynamic Routing like product/1, product/2 ................. we named the folder as [productId].

For every page in the app router receives route parameters as prop then destructuring is done the params object contains route parameters as key value pairs. Inside the page.tsx file we used params prop provided by nextJS to access productId route parameters.
The Dynamic routes are helpful when implementing the list detail pattern in any ui application.

Catch-all Segments : It is another documentation site.
Ex : Imagin we are preparing documentation site for project that we create our site contains multiple features and we need to explain those features correctly.
This is particularly useful for documentation

Whenever url doesn't present we obtain default 404 file. 
If we want to programatically render this page upon certain condition we can use notfound function from nextJS

Private Folders : 
A Private folder indicates that it is a private implementation detail and should not be considered by the routing system. The folder and all it's subfolders are excluded from routing. prefix the folder name with an underscore
Private folders are helpful in some conditions like for separating ui logic from routing logic and for consistently organizing internal files across a project

In the auth folder there were 3 sub folders namely register, login , forgot-password so if the routes were needed to be accessed then those should be accessed via routes named auth/login, auth/register, auth/forgot-password
However we can eliminate auth from routes present but keeping the register, login, forgot-password routes by adding open and closed brackets like auth this is called routeGroups.

Layouts:
A page is UI that is unique to a route. A layout is UI that is shared between multiple pages in the app. Layout is something which is responisble for displaying the content on screen.
In the header we have header, footer and a placeholder for children prop.

Route Group Layout: 
The primary use of RouteGroup is to organize your project in a manner that doesn't affect the URL.
To selectively apply a layout to certain Segments while leaving others unchanged.

Routing Metadata: 
Next.js introduced the Metadata API which allows you to define metadata for each page. Metadata ensures accurate and relevant information is displayed when you pages are shared or indexed
Both page and layout can have metadata but if metadata of page takes precedence. There is dynamic metadata and static metadata as types.

Link Component Navigation: 
The enable Navigation nextjs provides us with  ( link ) named component.

Active Links:
To determine whether the link is active or not nextjs provides ( usePathName ) hook 
Remember all react components are server components by default and hooks can only be used inside client components.
The purpose of usePathName hook is to get the current URL path.

Navigating programatically: 
Ex: In some websites we observe upon placing the order we are automatically redirected ti order placed successfully page.
We have router.back, router.forward, router.push, router.redirect as some of the methods.

Template Files:
The state preserves in Layouts representing the content of the newly loaded page but keep all the common elements untouched.
State is preserved meaning state value doesn't change for layouts where as for template it changes.
It is possible to include layout.tsx as well as template.tsx in such scenario the layout renders first children is replaced by children exported from template.

Loading Files:
This file allows us to create loading states that are displayed to users while a specific route segment's content is loading. nextJS will automatically handle this file while data or operation is being loaded.

Error Handling through special file error.tsx: 
simply code in ur own way to demonstrate error

Recovering from Errors:
Exectuing the reset function attempts to re-render the ErrorBoundary contents. If successfull the fallback error component is replaced with the re-rendering component from page.tsx.

Parallel Routes:
Parallel routes are an advanced routing mechanism that allows for the simulataneous rendering of multiple pages within the same layout.
Parallel routes in Next.js are defined using a feature known as slots.
Slots help structure our content in a modular fashion. To define a slot we use @folder naming convention. Each slot is automatically passed as a prop to its corresponding layout.tsx file.

//unmatched routes, conditional routes, intercepting routes watch the videos again if necessary

Conditional Routes:
while Authentication we use this. In real world scenario we probably use a function getuser or useAuth to determine the user's authentication state 

Intercepting routes:
Intercepting routes allow you to intercept or stop the default routing behaviour to present an alternate view or component when navigating through the UI, while still preserving the intended route for scenarios like page reloads.
To create an intercepting route at the same level we use ( .withparenthesis )
If you now click on f2 in f1 route it doesn't navigate to f1/f2 page because intercepting page is created which is (.)f2 will be rendered where as url will modified as f1/f2 but on reload it do change it's file to /f1/f2 page.
Note that intercepting folder and general folder should be on the same level like f2 in our case.
(..f3) this mean use this route instead of the s3 route one segment above while navigating from page.tsx within f4 folder to f3 folder.
4 notations to match Intercepting Routes Conventions:  
-> (.)foldername to match segments on the same level, (..)foldername to match segments one level above, (..)(..)foldername to match two levels above, (...)foldername to match segements from the root app directory.

------------------------Tutorial no 32(watch this video everything is clearly put into demo)----------------------------This is about parallelInterceptingRoutes
